# cluster_view.py ‚Äî Clustered Insight Mode with dropdown document generation

import streamlit as st
import os
from slugify import slugify
from components.cluster_synthesizer import generate_synthesized_insights, cluster_insights
from components.ai_suggester import generate_cluster_prd_docx, generate_cluster_prfaq_docx

def display_clustered_insight_cards(insights):
    if not insights:
        st.info("No insights to cluster.")
        return

    st.subheader("üß† Clustered Insight Themes")
    clusters = cluster_insights(insights)
    cards = generate_synthesized_insights(insights)

    if not cards:
        st.warning("No clusters found.")
        return

    for idx, card in enumerate(cards):
        cluster = clusters[idx]
        with st.container():
            st.markdown(f"### üìå {card['title']} ‚Äî {card['brand']}")
            st.markdown(f"**Summary:** {card['summary']}")
            st.markdown(f"**Mentions:** {len(cluster)} | Score Range: {card.get('score_range', '?')}")

            st.markdown("**Example Quotes:**")
            for quote in card["quotes"]:
                st.markdown(quote)

            if card["top_ideas"]:
                st.markdown("**üí° Top Suggestions:**")
                for idea in card["top_ideas"]:
                    st.markdown(f"- {idea}")

            filename = slugify(card['title'])[:64]
            doc_type = st.selectbox("Generate document for this cluster:", ["PRD", "PRFAQ"], key=f"cluster_doc_type_{idx}")

            if st.button(f"Generate {doc_type}", key=f"generate_cluster_doc_{idx}"):
                with st.spinner(f"Generating {doc_type}..."):
                    if doc_type == "PRD":
                        file_path = generate_cluster_prd_docx(cluster, filename)
                    elif doc_type == "PRFAQ":
                        file_path = generate_cluster_prfaq_docx(cluster, filename)
                    else:
                        file_path = None

                    if file_path and os.path.exists(file_path):
                        with open(file_path, "rb") as f:
                            st.download_button(
                                f"‚¨áÔ∏è Download {doc_type}",
                                f,
                                file_name=os.path.basename(file_path),
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                key=f"dl_cluster_doc_{idx}"
                            )
                    else:
                        st.error("‚ùå Document file was not created.")
